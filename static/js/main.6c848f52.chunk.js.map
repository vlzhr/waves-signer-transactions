{"version":3,"sources":["configs sync /^/.//config/-.*/.json$","components/Title/Title.tsx","components/Button/Button.tsx","components/TxFormWrapper/TxFormWrapper.tsx","components/SearchAsset/SearchAsset.tsx","shared/useOutsideClick.ts","components/MassTransferForm/useParseTransfers.ts","components/MassTransferForm/MassTransferForm.tsx","components/LoginModal/LoginModal.tsx","context/ConfigContext.tsx","components/Modal/Modal.tsx","components/Main/Main.tsx","components/Main/useBalances.ts","App.tsx","index.tsx"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","Title","children","priority","className","Button","variant","rest","TxFormWrapper","title","handleLogout","onConfirm","confirmText","onClick","preventDefault","SearchAsset","balances","onSelect","React","dropdownVisible","setDropdownVisible","currentBalances","setCurrentBalances","dropdownRef","balancesList","values","sort","a","b","asset","hasImage","onChange","value","target","trim","console","log","newBalances","filter","balance","name","toLowerCase","includes","ticker","useEffect","handler","ref","handleClickOutside","event","current","contains","document","addEventListener","removeEventListener","type","placeholder","style","backgroundImage","icon","displayName","toFormat","useParseTransfers","content","selectedAsset","useState","transfers","setTransfers","recipientHash","data","create","forEach","item","length","text","replace","recipient","amountString","push","getRecipientHashByCSVParseResult","parse","newTransfers","amountNum","amount","RegExp","test","BigNumber","parseAmount","reduce","result","add","cloneWithTokens","every","i","eq","MassTransferForm","signer","setAsset","inputValue","setInputValue","handleChange","handleConfirm","massTransfer","assetId","attachment","LoginModal","onClose","ProviderWeb","ProviderCloud","ConfigContext","createContext","nodeUrl","signerClientUrl","explorerUrl","dataServicesUrl","ConfigContextProvider","Provider","Context","ModalProvider","modalRef","useRef","modalNode","setModalNode","Modal","useContext","ReactDOM","createPortal","Main","props","config","setSigner","userAddress","setUserAddress","setOnSelectedSigner","loginResults","isModalOpen","setIsModalOpen","userBalances","setUserBalances","Balance","address","updateBalancesMs","onUpdate","useBalances","onLogin","useCallback","provider","currentSigner","Signer","NODE_URL","setProvider","login","user","res","rej","logout","require","process","env","REACT_APP_NETWORK","App","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.6c848f52.chunk.js","sourcesContent":["var map = {\n\t\"./config-mainnet.json\": 221,\n\t\"./config-testnet.json\": 222\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 220;","import * as React from 'react';\nimport './Title.scss';\n\ninterface Title {\n    priority?: '1' | '2' | '3' | '4';\n    className?: string;\n}\n\nexport const Title: React.FC<Title> = ({ children, priority = 2, className }) => {\n    const TitleTag = `h${priority}`;\n\n    return (\n        <h2 className={`title ${className}`}>{children}</h2>\n    );\n}\n","import * as React from 'react';\nimport './Button.scss';\n\ninterface Button {\n    variant: 'transparent' | 'primary';\n    onClick: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n    className?: string;\n}\n\nexport const Button: React.FC<Button> = ({ children, variant, className, ...rest }) => (\n    <button className={`btn btn_${variant} ${className}`} {...rest}>{children}</button>\n);\n","import * as React from 'react';\nimport { Title } from '../Title/Title';\nimport './TxFormWrapper.scss';\nimport { Button } from '../Button/Button';\n\ninterface TxFormWrapperProps {\n    onConfirm: () => void;\n    title?: string;\n    handleLogout?: () => void;\n    confirmText?: string;\n}\n\nexport const TxFormWrapper: React.FC<TxFormWrapperProps> = ({ title, handleLogout, children, onConfirm, confirmText = 'Confirm' }) => (\n    <form className='tx-form'>\n        <div className='space-between'>\n            <Title>{title}</Title>\n            {handleLogout && <Button variant='transparent' onClick={(e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n                e.preventDefault();\n                handleLogout();\n            }}>Log Out</Button>}\n        </div>\n\n        {children}\n\n        <Button className='big' variant='primary' onClick={onConfirm}>{confirmText}</Button>\n    </form>\n);\n","import * as React from 'react';\nimport { MyMoney } from '@waves/balances/src/utils';\nimport { useEffect } from 'react';\nimport './SearchAsset.scss';\nimport { useClickOut } from '../../shared/useOutsideClick';\n\ninterface SearchInputProps {\n    onSelect: (balance: MyMoney) => void;\n    balances: Record<string, MyMoney>;\n}\n\nexport const SearchAsset: React.FC<SearchInputProps> = ({ balances, onSelect }) => {\n    const [dropdownVisible, setDropdownVisible] = React.useState(false);\n    const [currentBalances, setCurrentBalances] = React.useState<MyMoney[]>([]);\n    const dropdownRef = React.useRef();\n    const balancesList = React.useMemo(() => Object.values(balances).sort((a, b) => a.asset.hasImage ? -1 : 0), [balances]);\n\n    const onChange = React.useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n        e.preventDefault();\n        const value = e.target.value.trim();\n        console.log('%c value', 'color: #e5b6ed', value);\n        const newBalances = balancesList\n            .filter(balance =>\n                balance.asset.name.toLowerCase().includes(value.toLowerCase()) ||\n                balance.asset.ticker?.toLowerCase().includes(value.toLowerCase()) ||\n                balance.asset.id.toLowerCase().includes(value.toLowerCase()))\n\n        setCurrentBalances(newBalances);\n    }, [balancesList]);\n\n    useEffect(() => {\n        setCurrentBalances(balancesList);\n    }, [balancesList]);\n\n    const switchDropdown = (e: React.MouseEvent) => {\n        e.preventDefault();\n        setDropdownVisible(!dropdownVisible);\n    }\n\n    useClickOut(() => { setDropdownVisible(false) }, dropdownRef);\n\n    return (\n        <div className='search-asset-container' ref={dropdownRef}>\n            <div className='search-input-wrapper'>\n                <input\n                    onChange={onChange}\n                    className='search-input input'\n                    type='text'\n                    placeholder='Type asset name'/>\n                <button className={`search-input-arrow ${dropdownVisible ? 'active' : ''}`} onClick={switchDropdown}/>\n            </div>\n\n            {dropdownVisible && <ul className='search-input-dropdown'>\n                {currentBalances.map(balance => (\n                    <li className='search-input-dropdown__item' key={balance.asset.id} onClick={() => onSelect(balance)}>\n                        <div className='search-input-dropdown__meta-wrapper'>\n                            <span className='search-input-dropdown__asset-icon' style={{ backgroundImage: `url('${balance.asset.icon}')` }} />\n                            <span className='search-input-dropdown__asset-ticker'>{balance.asset.ticker || balance.asset.name}</span>\n                            <span className='search-input-dropdown__asset-name'>{balance.asset.displayName}</span>\n                        </div>\n                        <div>\n                            {balance.toFormat()}\n                        </div>\n                    </li>\n                ))}\n            </ul>}\n        </div>\n    );\n}\n","import * as React from 'react';\nimport { useEffect } from 'react';\n\nexport const useClickOut = (handler: (event) => void, ref: React.RefObject<HTMLElement>) => {\n\n    useEffect(() => {\n        const handleClickOutside = (event) => {\n            if (ref.current && !ref.current.contains(event.target)) {\n                handler(event);\n            }\n        };\n        if (ref.current) {\n            document.addEventListener('mousedown', handleClickOutside);\n        }\n        return (): void => {\n            document.removeEventListener('mousedown', handleClickOutside);\n        };\n    }, [handler, ref]);\n};\n","import { parse } from 'papaparse';\nimport { useEffect, useState } from 'react';\nimport { BigNumber } from '@waves/bignumber';\nimport { ITransferItem } from './MassTransferForm';\nimport { MyMoney } from '@waves/balances';\n\nconst isEqual = (a: ITransferItem[], b: ITransferItem[]): boolean => {\n    return a.length === b.length && a.every((item, i) => {\n        return item.recipient === b[i].recipient && item.amount.eq(b[i].amount);\n    });\n}\n\nconst parseAmount = (amountString: string) => {\n    const validate = /^([0-9]+\\.)?[0-9]+$/;\n    const amount = amountString\n        .replace(new RegExp('\\\\,', 'g'), '')\n        .replace(new RegExp('\\\\.'), '.')\n        .replace(',', '.');\n\n    if (!validate.test(amount)) {\n        return new BigNumber(0);\n    }\n\n    return new BigNumber(amount);\n}\n\nconst getRecipientHashByCSVParseResult = (data: string[][]): Record<string, string[]> => {\n    const recipientHash = Object.create(null);\n    data.forEach((item) => {\n        if (!item.length) {\n            return null;\n        }\n\n        const [recipient, amountString] = item.map((text) => text.replace(/\\s/g, '').replace(/\"/g, ''));\n        if (!(recipient && amountString)) {\n            return null;\n        }\n\n        if (!recipientHash[recipient]) {\n            recipientHash[recipient] = [];\n        }\n\n        recipientHash[recipient].push(amountString);\n    });\n    return recipientHash;\n}\n\nexport const useParseTransfers = (content: string, selectedAsset: MyMoney): { transfers: ITransferItem[] } => {\n    const [transfers, setTransfers] = useState<ITransferItem[]>([]);\n\n    useEffect(() => {\n        if (!content || !selectedAsset) {\n            return;\n        }\n\n        const { data } = parse(content || '');\n\n\n        const recipientHash = getRecipientHashByCSVParseResult(data);\n        const newTransfers = [];\n\n        Object.keys(recipientHash).forEach((recipient) => {\n            const amountNum = recipientHash[recipient]\n                .map((amount) => {\n                    try {\n                        return parseAmount(amount);\n                    } catch (e) {\n                        return new BigNumber(0);\n                    }\n                })\n                .reduce((result, item) => result.add(item));\n            const amount = selectedAsset.cloneWithTokens(amountNum);\n            newTransfers.push({ recipient, amount });\n        });\n\n        if (!isEqual(transfers, newTransfers)) {\n            setTransfers(newTransfers);\n        }\n\n    }, [content, transfers])\n\n    return { transfers }\n};\n","import * as React from 'react';\nimport { TxFormWrapper } from '../TxFormWrapper/TxFormWrapper';\nimport { SearchAsset } from '../SearchAsset/SearchAsset';\nimport { MyMoney } from '@waves/balances/src/utils';\nimport { Signer } from '@waves/signer';\nimport { useParseTransfers } from './useParseTransfers';\n\nexport interface ITransferItem {\n    recipient: string;\n    amount: MyMoney;\n}\n\nconst TEXTAREA_PLACEHOLDER = 'Use a comma to separate recipient and the amount to send. Use\\n' +\n    'a new line for each recipient. \\n' +\n    'Example:\\n' +\n    'Address1,Amount1\\n' +\n    'Alias2,Amount2'\n\ninterface MassTransferFormProps {\n    handleLogout: () => void;\n    balances: Record<string, MyMoney>;\n    signer: Signer;\n}\n\nexport const MassTransferForm: React.FC<MassTransferFormProps> = ({ handleLogout, balances, signer }) => {\n    const [selectedAsset, setAsset] = React.useState<MyMoney>();\n    const [inputValue, setInputValue] = React.useState('');\n\n    const handleChange = React.useCallback((e: React.ChangeEvent<HTMLTextAreaElement>) => {\n        e.preventDefault();\n\n        setInputValue(e.target.value);\n    }, [balances]);\n\n    const onSelect = React.useCallback((balance: MyMoney) => {\n        setAsset(balance)\n    }, []);\n\n    const handleConfirm = React.useCallback(() => {\n        signer.massTransfer({\n            transfers: [{ recipient: 'w', amount: 1 }],\n            assetId: selectedAsset.asset.id,\n            attachment: null\n        });\n    }, [selectedAsset]);\n\n    const transfers = useParseTransfers(inputValue, selectedAsset);\n\n    return <TxFormWrapper title={'Mass Transfer'} handleLogout={handleLogout} onConfirm={handleConfirm} confirmText='Transfer'>\n\n        <div className='form__row'>\n            <label className='form__label'>Select Asset</label>\n            <SearchAsset balances={balances} onSelect={onSelect}/>\n        </div>\n\n        <div className='form__row'>\n            <div className='space-between'>\n                <label className='form__label'>Recipients, Amounts: 0/100</label>\n                <span className='link'>Import CSV File</span>\n            </div>\n            <textarea className='input textarea' placeholder={TEXTAREA_PLACEHOLDER} onChange={handleChange}/>\n        </div>\n\n        <div>\n            {'error'}\n        </div>\n    </TxFormWrapper>\n}\n","import * as React from 'react';\nimport { ProviderCloud } from '@waves.exchange/provider-cloud';\nimport { ProviderWeb } from '@waves.exchange/provider-web';\nimport './LoginModal.scss';\nimport { Title } from '../Title/Title';\n\ninterface LoginModalProps {\n    onSelect: (type: typeof ProviderCloud | typeof ProviderWeb) => any;\n    onClose?: () => void;\n}\n\nexport const LoginModal: React.FC<LoginModalProps> = ({ onSelect, onClose }) => {\n\n    const selectWeb = (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        e.preventDefault();\n        onSelect(ProviderWeb);\n    }\n    const selectCloud = (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        e.preventDefault();\n        onSelect(ProviderCloud)\n    };\n\n    return <form className='login-container'>\n        <Title className='login-title'>Connect wallet</Title>\n        <div className='buttons-wrapper'>\n            <button className='login-btn storage' onClick={selectWeb}>Waves Exchange Storage</button>\n            <button className='login-btn email' onClick={selectCloud}>Email Account</button>\n        </div>\n    </form>\n};\n","import { createContext } from 'react';\n\nexport type ConfigContextType = {\n    nodeUrl: string;\n    signerClientUrl: string;\n    explorerUrl: string;\n    dataServicesUrl: string;\n};\n\nexport const ConfigContext = createContext<ConfigContextType>({\n    nodeUrl: '',\n    signerClientUrl: '',\n    explorerUrl: '',\n    dataServicesUrl: ''\n});\n\nConfigContext.displayName = 'ConfigContext';\n\nexport const ConfigContextProvider = ConfigContext.Provider;\n","import React, { useRef, useContext, useState, useEffect, FC } from 'react';\nimport ReactDOM from \"react-dom\";\nimport './Modal.scss';\n\nconst Context = React.createContext<HTMLDivElement | null>(null);\n\nexport const ModalProvider: FC = ({ children }) => {\n    const modalRef = useRef<HTMLDivElement>(null);\n    const [modalNode, setModalNode] = useState<HTMLDivElement | null>(null);\n\n    useEffect(() => {\n        if (modalRef.current) {\n            setModalNode(modalRef.current);\n        }\n    }, [modalRef.current]);\n\n    return (\n        <div className='container'>\n            <Context.Provider value={modalNode}>{children}</Context.Provider>\n            <div ref={modalRef} />\n        </div>\n    );\n}\n\ninterface ModalProps {\n    onClose: () => void;\n}\n\nexport const Modal: FC<ModalProps> = ({ onClose, children, ...props }) => {\n    const modalNode = useContext(Context);\n\n    return modalNode\n        ? ReactDOM.createPortal(\n            <div className='overlay'>\n                <div className='dialog'>\n                    {children}\n                </div>\n            </div>,\n            modalNode\n        )\n        : null;\n}\n","import React, { useCallback, useContext, useEffect, useState } from 'react';\nimport { MassTransferForm } from '../MassTransferForm/MassTransferForm';\nimport { LoginModal } from '../LoginModal/LoginModal';\nimport { ProviderWeb } from '@waves.exchange/provider-web';\nimport { ProviderCloud } from '@waves.exchange/provider-cloud';\nimport { Signer } from '@waves/signer';\nimport { ConfigContext } from '../../context/ConfigContext';\nimport { BigNumber } from '@waves/bignumber';\nimport { useBalances } from './useBalances';\nimport { Modal } from '../Modal/Modal';\n\ninterface MainProps {\n\n}\n\nexport const Main: React.FC<MainProps> = (props) => {\n    const config = useContext(ConfigContext);\n    const [signer, setSigner] = useState<Signer|null|undefined>(null);\n    const [userAddress, setUserAddress] = useState('');\n    const [onSelectSigner, setOnSelectedSigner] = useState<boolean>();\n    const [loginResults, setLoginResults] = useState<any>(null);\n    const [isModalOpen, setIsModalOpen] = useState(true);\n\n    const { userBalances } = useBalances(signer, userAddress);\n\n    console.log('%c config', 'color: #e5b6ed', config);\n\n    const onLogin = useCallback(async (provider: typeof ProviderWeb | typeof ProviderCloud) => {\n        setOnSelectedSigner(false);\n        setUserAddress('');\n        const currentSigner = signer || new Signer({ NODE_URL: config.nodeUrl });\n        currentSigner.setProvider(new provider() as any);\n        setSigner(currentSigner);\n        try {\n            const user = await currentSigner.login();\n            setUserAddress(user.address);\n            loginResults && loginResults.res({ ...user, signer: currentSigner });\n            setIsModalOpen(false)\n            return user;\n        } catch (e) {\n            loginResults && loginResults.rej();\n            return;\n        }\n    }, [signer, loginResults]);\n\n    const logout = useCallback(async () => {\n        setIsModalOpen(true);\n        if (!signer) {\n            return;\n        }\n\n        try {\n            await signer.logout();\n            setUserAddress('');\n            setSigner(null);\n        } catch (e) {\n            return;\n        }\n    }, [signer]);\n\n\n    return <div>\n        <MassTransferForm handleLogout={logout} balances={userBalances} signer={signer}/>\n        {isModalOpen && (\n            <Modal onClose={() => setIsModalOpen(false)}>\n                <LoginModal onSelect={onLogin} onClose={() => setIsModalOpen(false)}/>\n            </Modal>\n        )}\n    </div>\n}\n","import { useContext, useEffect, useState } from 'react';\nimport { Signer } from '@waves/signer';\nimport { MyMoney } from '@waves/balances/src/utils';\nimport { Balance } from '@waves/balances';\nimport { ConfigContext } from '../../context/ConfigContext';\n\nexport const useBalances = (signer: Signer|null|undefined, userAddress: string) => {\n    const [userBalances, setUserBalances] = useState<Record<string, MyMoney>>({});\n    const config = useContext(ConfigContext);\n\n    useEffect(() => {\n        if (userAddress) {\n            const balance = new Balance({\n                address: userAddress,\n                updateBalancesMs: 5000,\n                dataServicesUrl: 'https://waves.exchange/api/v1',\n                nodeUrl: config.nodeUrl,\n            });\n\n            balance.onUpdate((balances) => {\n                console.log('%c balances', 'color: #e5b6ed', balances);\n                setUserBalances(balances);\n            });\n        }\n    }, [userAddress]);\n\n\n    // const fetchUserBalances = async (currentSigner: Signer): Promise<Record<string, Balance>> => {\n    //     const balances = await currentSigner.getBalance();\n    //     const balancesMap = balances.reduce<Record<string, Balance>>((acc, balance) => {\n    //         acc[balance.assetId] = balance;\n    //\n    //         return acc;\n    //     }, {});ss\n    //\n    //\n    //     return balancesMap;\n    // };\n    //\n    // useEffect(() => {\n    //     if (!signer || !userAddress) {\n    //         return;\n    //     }\n    //\n    //     const balancesSubscription = createPolling<Record<string, Balance>>(\n    //         () => fetchUserBalances(signer),\n    //         60 * 1000\n    //     ).subscribe((balances) => {\n    //         setUserBalances(balances);\n    //     });\n    //\n    //     return () => {\n    //         balancesSubscription.unsubscribe();\n    //     };\n    // }, [signer, userAddress]);\n\n    return { userBalances }\n}\n","import React from 'react';\nimport './App.scss';\nimport { Main } from './components/Main/Main';\nimport { ConfigContextProvider, ConfigContextType } from './context/ConfigContext';\nimport { ModalProvider } from './components/Modal/Modal';\n\n\nconst config: ConfigContextType = require(`./configs/config-${process.env.REACT_APP_NETWORK || 'mainnet'}.json`);\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <ModalProvider>\n                <ConfigContextProvider value={config}>\n                    <Main/>\n                </ConfigContextProvider>\n            </ModalProvider>\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}