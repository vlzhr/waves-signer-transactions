{"version":3,"sources":["components/Title/Title.tsx","components/Button/Button.tsx","components/TxFormWrapper/TxFormWrapper.tsx","components/AssetLogo/AssetLogo.tsx","components/SearchAsset/components/DropdownItem.tsx","components/SearchAsset/SearchAsset.tsx","shared/useOutsideClick.ts","components/MassTransferForm/useParseTransfers.ts","components/Pending/Pending.tsx","components/Error/PlateError.tsx","shared/useImportFile.tsx","components/MassTransferForm/MassTransferForm.tsx","shared/readFile.ts","components/LoginModal/LoginModal.tsx","context/ConfigContext.tsx","components/Modal/Modal.tsx","components/Main/Main.tsx","components/Main/useBalances.ts","App.tsx","index.tsx"],"names":["Title","children","className","priority","Button","variant","rest","TxFormWrapper","title","handleLogout","onConfirm","confirmText","onClick","e","preventDefault","GOOD_COLORS_LIST","AssetLogo","asset","letter","name","toString","charAt","toUpperCase","color","assetId","sum","split","map","char","charCodeAt","reduce","acc","code","length","getAssetLogoBackground","id","fontSize","Math","round","Number","style","backgroundColor","DropdownItem","balance","onSelectItem","inInput","icon","backgroundImage","ticker","displayName","toFormat","SearchAsset","balances","onSelect","selected","React","selectedAsset","setAsset","dropdownVisible","setDropdownVisible","currentBalances","setCurrentBalances","isFocused","setIsFocused","inputValue","setInputValue","dropdownRef","balancesList","Object","values","sort","a","b","hasImage","onChange","value","target","trim","newBalances","filter","toLowerCase","includes","useEffect","handler","ref","handleClickOutside","event","current","contains","document","addEventListener","removeEventListener","isSelectedVisible","onFocus","onBlur","type","placeholder","useParseTransfers","content","useState","transfers","setTransfers","recipientHash","data","create","forEach","item","text","replace","recipient","amountString","push","getRecipientHashByCSVParseResult","parse","newTransfers","keys","amountNum","amount","RegExp","test","BigNumber","parseAmount","result","add","cloneWithTokens","every","i","eq","isEqual","Pending","props","PlateError","useImportFile","onChangeProp","input","useRef","createElement","position","left","top","body","appendChild","createInput","file","files","fileExtension","isFileValid","status","message","removeChild","click","getSendingSumm","bal","prev","MassTransferForm","signer","balancePending","descValue","setDescValue","error","setError","handleChange","handleDescChange","fileBlob","reader","FileReader","Promise","resolve","reject","readAsBinaryString","readFile","then","catch","handleConfirm","gt","massTransfer","getCoins","toNumber","attachment","libs","crypto","base58Encode","stringToBytes","broadcast","tx","waitTxConfirm","console","log","JSON","stringify","isDisabledButton","disabled","LoginModal","isPending","ProviderCloud","ProviderWeb","ConfigContext","createContext","nodeUrl","signerClientUrl","explorerUrl","dataServicesUrl","iconServiceUrl","ConfigContextProvider","Provider","Context","ModalProvider","modalRef","modalNode","setModalNode","Modal","onClose","useContext","ReactDOM","createPortal","Main","config","setIsPending","setSigner","userAddress","setUserAddress","loginResults","isModalOpen","setIsModalOpen","balanceRef","userBalances","setUserBalances","setBalancePending","Balance","iconUrl","address","updateBalancesMs","onUpdate","destroy","useBalances","onLogin","useCallback","provider","currentSigner","Signer","NODE_URL","setProvider","login","user","res","rej","logout","require","App","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.1f3c12f6.chunk.js","sourcesContent":["import * as React from 'react';\nimport './Title.scss';\n\ninterface Title {\n    priority?: '1' | '2' | '3' | '4';\n    className?: string;\n}\n\nexport const Title: React.FC<Title> = ({ children, priority = 2, className }) => {\n    // const TitleTag = `h${priority}`;\n\n    return (\n        <h2 className={`title ${className}`}>{children}</h2>\n    );\n}\n","import * as React from 'react';\nimport './Button.scss';\nimport { ButtonHTMLAttributes } from 'react';\n\ninterface Button extends ButtonHTMLAttributes<any> {\n    variant: 'transparent' | 'primary';\n    onClick: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n    className?: string;\n}\n\nexport const Button: React.FC<Button> = ({ children, variant, className, ...rest }) => (\n    <button className={`btn btn_${variant} ${className}`} {...rest}>\n        {children}\n    </button>\n);\n","import * as React from 'react';\nimport { Title } from '../Title/Title';\nimport './TxFormWrapper.scss';\nimport { Button } from '../Button/Button';\n\ninterface TxFormWrapperProps {\n    onConfirm: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n    title?: string;\n    handleLogout?: () => void;\n    confirmText?: string;\n}\n\nexport const TxFormWrapper: React.FC<TxFormWrapperProps> = ({ title, handleLogout, children, onConfirm, confirmText = 'Confirm' }) => (\n    <form className='tx-form'>\n        <div className='space-between'>\n            <Title>{title}</Title>\n            {handleLogout && <Button variant='transparent' onClick={(e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n                e.preventDefault();\n                handleLogout();\n            }}>Log Out</Button>}\n        </div>\n\n        {children}\n\n    </form>\n);\n","import * as React from 'react';\nimport { MyAsset } from '@waves/balances';\nimport './AssetLogo.scss';\n\ninterface AssetLogoProps {\n    asset: MyAsset;\n}\n\nconst GOOD_COLORS_LIST = [\n    '#39a12c',\n    '#6a737b',\n    '#e49616',\n    '#008ca7',\n    '#ff5b38',\n    '#ff6a00',\n    '#c74124',\n    '#00a78e',\n    '#b01e53',\n    '#e0c61b',\n    '#5a81ea',\n    '#72b7d2',\n    '#a5b5c3',\n    '#81c926',\n    '#86a3bd',\n    '#c1d82f',\n    '#5c84a8',\n    '#267e1b',\n    '#fbb034',\n    '#ff846a',\n    '#47c1ff',\n    '#00a0af',\n    '#85d7c6',\n    '#8a7967',\n    '#26c1c9',\n    '#72d28b',\n    '#5B1909',\n    '#264764',\n    '#270774',\n    '#8763DE',\n    '#F04085',\n    '#1E6AFD',\n    '#FF1E43',\n    '#D3002D',\n    '#967400',\n    '#264163'\n];\n\nconst getAssetLogoBackground = (assetId: string): string => {\n    const sum = assetId.split('')\n        .map(char => char.charCodeAt(0))\n        .reduce((acc, code) => acc + code, 0);\n    return GOOD_COLORS_LIST[sum % GOOD_COLORS_LIST.length];\n};\n\nexport const AssetLogo: React.FC<AssetLogoProps> = ({ asset }) => {\n    const letter = asset.name.toString().charAt(0).toUpperCase();\n    const color = getAssetLogoBackground(asset.id);\n    const fontSize = Math.round((Number(24) || 0) * 0.43);\n\n    return (\n        <div className='asset-logo' >\n            <div className='asset-logo__logo' style={{ backgroundColor: color, fontSize: fontSize }}>{letter}</div>\n        </div>\n    );\n}\n","import * as React from 'react';\nimport { MyMoney } from '@waves/balances/src/utils';\nimport { HTMLAttributes } from 'react';\nimport { AssetLogo } from '../../AssetLogo/AssetLogo';\n\ninterface DropdownProps extends HTMLAttributes<any> {\n    balance: MyMoney;\n    onSelectItem?: (balance: MyMoney) => void;\n    inInput?: boolean;\n}\n\nexport const DropdownItem: React.FC<DropdownProps> = ({ balance, onSelectItem, className, inInput = false }) => (\n    <li className={`search-input-dropdown__item ${className}`} key={balance.asset.id} onClick={() => {\n        if (onSelectItem) {\n            onSelectItem(balance)\n        }\n    }}>\n        <div className='search-input-dropdown__meta-wrapper'>\n            {balance.asset.icon ?\n                <span className='search-input-dropdown__asset-icon' style={{ backgroundImage: `url('${balance.asset.icon}')` }} /> :\n                <AssetLogo asset={balance.asset} />}\n            <span className='search-input-dropdown__asset-ticker'>{balance.asset.ticker || balance.asset.name}</span>\n            <span className='search-input-dropdown__asset-name'>{balance.asset.displayName}</span>\n        </div>\n        {!inInput && <div className='search-input-dropdown__asset-balance'>\n            {balance.toFormat()}\n        </div>}\n    </li>\n);\n","import * as React from 'react';\nimport { MyMoney } from '@waves/balances/src/utils';\nimport { useEffect } from 'react';\nimport './SearchAsset.scss';\nimport { useClickOut } from '../../shared/useOutsideClick';\nimport { DropdownItem } from './components/DropdownItem';\n\ninterface SearchInputProps {\n    onSelect: (balance: MyMoney) => void;\n    balances: Record<string, MyMoney>;\n    selected: MyMoney;\n}\n\nexport const SearchAsset: React.FC<SearchInputProps> = ({ balances, onSelect, selected }) => {\n    const [selectedAsset, setAsset] = React.useState<MyMoney>();\n    const [dropdownVisible, setDropdownVisible] = React.useState(false);\n    const [currentBalances, setCurrentBalances] = React.useState<MyMoney[]>([]);\n    const [isFocused, setIsFocused] = React.useState(false);\n    const [inputValue, setInputValue] = React.useState('');\n    const dropdownRef = React.useRef();\n    const balancesList = React.useMemo(() => Object.values(balances).sort((a, b) => a.asset.hasImage ? -1 : 0), [balances]);\n\n    React.useEffect(() => {\n        if (selected?.asset.id !== selectedAsset?.asset.id) {\n            setAsset(selected);\n        }\n    }, [selected, selectedAsset]);\n\n    const onChange = React.useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n        e.preventDefault();\n        setDropdownVisible(true);\n        const value = e.target.value.trim();\n        setInputValue(value);\n\n        if (value) {\n            const newBalances = balancesList\n                .filter(balance =>\n                    balance.asset.name.toLowerCase().includes(value.toLowerCase()) ||\n                    balance.asset.ticker?.toLowerCase().includes(value.toLowerCase()) ||\n                    balance.asset.id.toLowerCase().includes(value.toLowerCase()))\n\n            setCurrentBalances(newBalances);\n        } else {\n            setCurrentBalances(balancesList);\n        }\n\n    }, [balancesList]);\n\n    useEffect(() => {\n        setCurrentBalances(balancesList);\n    }, [balancesList]);\n\n    const switchDropdown = (e: React.MouseEvent) => {\n        e.preventDefault();\n        setDropdownVisible(!dropdownVisible);\n    }\n\n    useClickOut(() => {\n        setDropdownVisible(false);\n        setIsFocused(false);\n    }, dropdownRef);\n\n    const isSelectedVisible = React.useMemo(() =>\n        selectedAsset && !dropdownVisible && !isFocused,\n        [selectedAsset, dropdownVisible, isFocused]);\n\n    return (\n        <div className='search-asset-container' ref={dropdownRef}>\n            <div className={`search-input-wrapper ${isSelectedVisible ? 'hide-icon' : ''}`}>\n\n                <input\n                    value={inputValue}\n                    onFocus={() => {\n                        setDropdownVisible(true);\n                        setIsFocused(true);\n                    }}\n                    onBlur={() => {\n                        setIsFocused(false);\n                    }}\n                    onChange={onChange}\n                    className={`search-input input ${isSelectedVisible ? 'transparent' : ''}`}\n                    type='text'\n                    placeholder='Type asset name'/>\n\n                <button className={`search-input-arrow ${dropdownVisible ? 'active' : ''}`} onClick={switchDropdown}/>\n\n                {isSelectedVisible && <DropdownItem className='in-input' balance={selectedAsset} inInput={true}/>}\n\n            </div>\n\n            {dropdownVisible && currentBalances.length > 0 && <ul className='search-input-dropdown'>\n                {currentBalances.map(balance => (\n                    <DropdownItem key={balance.asset.id} balance={balance} onSelectItem={(balance) => {\n                        setDropdownVisible(false);\n                        onSelect(balance);\n                        setAsset(balance);\n            }} />\n                ))}\n            </ul>}\n        </div>\n    );\n}\n","import * as React from 'react';\nimport { useEffect } from 'react';\n\nexport const useClickOut = (handler: (event) => void, ref: React.RefObject<HTMLElement>) => {\n\n    useEffect(() => {\n        const handleClickOutside = (event) => {\n            if (ref.current && !ref.current.contains(event.target)) {\n                handler(event);\n            }\n        };\n        if (ref.current) {\n            document.addEventListener('mousedown', handleClickOutside);\n        }\n        return (): void => {\n            document.removeEventListener('mousedown', handleClickOutside);\n        };\n    }, [handler, ref]);\n};\n","import { parse } from 'papaparse';\nimport { useEffect, useState } from 'react';\nimport { BigNumber } from '@waves/bignumber';\nimport { ITransferItem } from './MassTransferForm';\nimport { MyMoney } from '@waves/balances';\n\nconst isEqual = (a: ITransferItem[], b: ITransferItem[]): boolean => {\n    return a.length === b.length && a[0]?.amount?.asset.id === b[0]?.amount?.asset.id  && a.every((item, i) => {\n        return item.recipient === b[i].recipient && item.amount.eq(b[i].amount);\n    });\n}\n\nconst parseAmount = (amountString: string) => {\n    const validate = /^([0-9]+\\.)?[0-9]+$/;\n    const amount = amountString\n        .replace(new RegExp('\\\\,', 'g'), '')\n        .replace(new RegExp('\\\\.'), '.')\n        .replace(',', '.');\n\n    if (!validate.test(amount)) {\n        return new BigNumber(0);\n    }\n\n    return new BigNumber(amount);\n}\n\nconst getRecipientHashByCSVParseResult = (data: string[][]): Record<string, string[]> => {\n    const recipientHash = Object.create(null);\n    data.forEach((item) => {\n        if (!item.length) {\n            return null;\n        }\n\n        const [recipient, amountString] = item.map((text) => text.replace(/\\s/g, '').replace(/\"/g, ''));\n        if (!(recipient && amountString)) {\n            return null;\n        }\n\n        if (!recipientHash[recipient]) {\n            recipientHash[recipient] = [];\n        }\n\n        recipientHash[recipient].push(amountString);\n    });\n    return recipientHash;\n}\n\nexport const useParseTransfers = (content: string, selectedAsset: MyMoney): { transfers: ITransferItem[] } => {\n    const [transfers, setTransfers] = useState<ITransferItem[]>([]);\n\n    useEffect(() => {\n        if (!content) {\n            setTransfers([]);\n        }\n    }, [content]);\n\n    useEffect(() => {\n        if (!content || !selectedAsset) {\n            return;\n        }\n\n        const { data } = parse(content || '');\n\n\n        const recipientHash = getRecipientHashByCSVParseResult(data);\n        const newTransfers = [];\n\n        Object.keys(recipientHash).forEach((recipient) => {\n            const amountNum = recipientHash[recipient]\n                .map((amount) => {\n                    try {\n                        return parseAmount(amount);\n                    } catch (e) {\n                        return new BigNumber(0);\n                    }\n                })\n                .reduce((result, item) => result.add(item));\n            const amount = selectedAsset.cloneWithTokens(amountNum);\n            newTransfers.push({ recipient, amount });\n        });\n\n        if (!isEqual(transfers, newTransfers)) {\n            setTransfers(newTransfers);\n        }\n\n    }, [content, transfers, selectedAsset])\n\n    return { transfers }\n};\n","import * as React from 'react';\nimport './Pending.scss';\n\ninterface PendingProps {\n\n}\n\nexport const Pending: React.FC<PendingProps> = (props) => {\n\n    return (<div className='loader'>\n        <div className=\"loader__dot\" />\n    </div>\n);\n}\n","import * as React from 'react';\nimport './PlateError.scss';\n\nexport const PlateError: React.FC = ({ children }) => {\n\n    return (\n        <div className='plate error'>\n            {children}\n        </div>\n    );\n}\n","import { useEffect, useRef } from 'react';\n\n\nconst createInput = (): HTMLInputElement => {\n\n    const input = document.createElement('input');\n    input.type = 'file';\n    input.style.position = 'absolute';\n    input.style.left = '-100px';\n    input.style.top = '-100px';\n    document.body.appendChild(input);\n    return input;\n}\n\n\nconst isFileValid = (file): boolean => {\n    const fileExtension = file.name.split('.')[1];\n    return fileExtension && fileExtension === 'csv';\n}\n\nexport const useImportFile = (onChangeProp: (data) => void) => {\n    const input = useRef(null);\n\n    useEffect(() => {\n        const onChange = () => {\n            const [file] = input.current.files;\n\n            if (file) {\n                if (!isFileValid(file)) {\n                    onChangeProp({\n                        data: {\n                            status: 'error',\n                            type: 'extension',\n                            message: 'Wrong extension',\n                            file\n                        }\n                    });\n                    return null;\n                }\n\n                onChangeProp({ data: { status: 'ok', file } });\n            }\n\n            input.current.value = '';\n        }\n\n        input.current = createInput();\n\n        input.current.addEventListener('change', () => onChange());\n\n\n        return () => {\n            document.body.removeChild(input.current);\n        }\n    }, [onChangeProp]);\n\n\n    return {\n        onClick: () => {\n            input.current.click();\n        }\n    }\n}\n","import * as React from 'react';\nimport { TxFormWrapper } from '../TxFormWrapper/TxFormWrapper';\nimport { SearchAsset } from '../SearchAsset/SearchAsset';\nimport { MyMoney } from '@waves/balances/src/utils';\nimport { Signer } from '@waves/signer';\nimport { useParseTransfers } from './useParseTransfers';\nimport { Button } from '../Button/Button';\nimport { Pending } from '../Pending/Pending';\nimport { PlateError } from '../Error/PlateError';\nimport { libs } from '@waves/waves-transactions';\nimport { useImportFile } from '../../shared/useImportFile';\nimport { readFile } from '../../shared/readFile';\nimport './MasstransferForm.scss';\n\nexport interface ITransferItem {\n    recipient: string;\n    amount: MyMoney;\n}\n\nconst TEXTAREA_PLACEHOLDER = 'Use a comma to separate recipient and the amount to send. Use\\n' +\n    'a new line for each recipient. \\n' +\n    'Example:\\n' +\n    'Address1,Amount1\\n' +\n    'Alias2,Amount2'\n\ninterface MassTransferFormProps {\n    handleLogout: () => void;\n    balances: Record<string, MyMoney>;\n    signer: Signer;\n    balancePending: boolean;\n}\n\nconst getSendingSumm = (transfers: ITransferItem[]) => {\n    return transfers.map(bal => bal.amount).reduce((prev, acc) => {\n        return acc.add(prev);\n    }, transfers[0].amount.cloneWithTokens(0));\n};\n\nexport const MassTransferForm: React.FC<MassTransferFormProps> = ({ handleLogout, balances, signer, balancePending }) => {\n    const [selectedAsset, setAsset] = React.useState<MyMoney>();\n    const [inputValue, setInputValue] = React.useState('');\n    const [descValue, setDescValue] = React.useState('');\n    const [error, setError] = React.useState('');\n\n\n    const handleChange = React.useCallback((e: React.ChangeEvent<HTMLTextAreaElement>) => {\n        e.preventDefault();\n\n        setInputValue(e.target.value);\n        setError('');\n    }, []);\n\n    const handleDescChange = React.useCallback((e: React.ChangeEvent<HTMLTextAreaElement>) => {\n        e.preventDefault();\n\n        setDescValue(e.target.value);\n    }, []);\n\n    const onSelect = React.useCallback((balance: MyMoney) => {\n        setError('');\n        setAsset(balance)\n    }, []);\n\n    const handleError = ({ data }) => {\n        if (data.status === 'ok') {\n            readFile(data.file).then(result => {\n                setInputValue(result);\n            }).catch(e => {\n                setError(e);\n            });\n        } else {\n            setError('Wrong file extension')\n        }\n    }\n\n    const { onClick } = useImportFile(handleError);\n\n    const { transfers } = useParseTransfers(inputValue.trim(), selectedAsset);\n\n    const handleConfirm = React.useCallback(async (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        e.preventDefault();\n        setError('');\n        if (transfers.length > 100) {\n            setError('Any recipients after the first 100 will be ignored.')\n        }\n\n        if (transfers.length && getSendingSumm(transfers).gt(balances[selectedAsset.asset.id])) {\n            setError('Insufficient funds.')\n            return;\n        }\n\n        try {\n            const tx = await signer.massTransfer({\n                transfers: transfers.map(item => ({ ...item, amount: item.amount.getCoins().toNumber() })),\n                assetId: selectedAsset.asset.id,\n                attachment: libs.crypto.base58Encode(libs.crypto.stringToBytes(descValue))\n            }).broadcast();\n\n            // @ts-ignore\n            await signer.waitTxConfirm(tx, 0);\n\n            console.log('%c DONE', 'color: green');\n        } catch (e) {\n            setError(JSON.stringify(e, null, 4));\n        }\n\n    }, [selectedAsset, signer, transfers, descValue]);\n\n    const isDisabledButton = React.useMemo(\n        () => transfers.length === 0 || balancePending,\n        [transfers, balancePending]\n    );\n\n    const clearForm = () => {\n        setError('');\n        setInputValue('');\n        setDescValue('');\n        setAsset(null);\n    }\n\n    return <TxFormWrapper title={'Mass Transfer'} handleLogout={() => {\n        handleLogout();\n        clearForm();\n    }} onConfirm={handleConfirm} confirmText='Transfer'>\n\n        <div className='form__row'>\n            <label className='form__label'>Select Asset</label>\n            {balancePending ?\n                <Pending /> :\n                <SearchAsset balances={balances} onSelect={onSelect} selected={selectedAsset}/>\n            }\n\n        </div>\n\n        <div className='form__row'>\n            <div className='space-between'>\n                <label className='form__label'>Recipients, Amounts: {transfers.length}/100</label>\n                <span className='link' onClick={onClick}>Import CSV File</span>\n            </div>\n            <textarea className='input textarea' placeholder={TEXTAREA_PLACEHOLDER} onChange={handleChange} value={inputValue}/>\n        </div>\n\n        <div className='form__row'>\n            <label className='form__label'>Description</label>\n            <textarea className='input textarea' placeholder={'Write a message'} onChange={handleDescChange} value={descValue} />\n        </div>\n\n        {error && <PlateError>\n            {error}\n        </PlateError>}\n\n        <Button className='big confirm-btn' variant='primary' onClick={handleConfirm} disabled={isDisabledButton}>Transfer</Button>\n    </TxFormWrapper>\n}\n","export const readFile = (fileBlob: File): Promise<string> => {\n    const reader = new FileReader();\n    const promise = new Promise((resolve, reject) => {\n        reader.addEventListener('error', (error) => {\n            reject(error);\n        });\n        reader.addEventListener('abort', (event) => {\n            reject(event);\n        });\n        reader.addEventListener('load', () => {\n            resolve(reader.result);\n        }, false);\n        reader.readAsBinaryString(fileBlob);\n    })\n\n\n    return promise as Promise<string>;\n}\n","import * as React from 'react';\nimport { ProviderCloud } from '@waves.exchange/provider-cloud';\nimport { ProviderWeb } from '@waves.exchange/provider-web';\nimport './LoginModal.scss';\nimport { Title } from '../Title/Title';\nimport { Pending } from '../Pending/Pending';\n\ninterface LoginModalProps {\n    onSelect: (type: typeof ProviderCloud | typeof ProviderWeb) => any;\n    onClose?: () => void;\n    isPending: boolean;\n}\n\nexport const LoginModal: React.FC<LoginModalProps> = ({ onSelect, isPending }) => {\n\n    const selectWeb = (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        e.preventDefault();\n        onSelect(ProviderWeb);\n    }\n    const selectCloud = (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        e.preventDefault();\n        onSelect(ProviderCloud)\n    };\n\n    return <form className='login-container'>\n        <Title className='login-title'>Connect wallet</Title>\n         <div className='buttons-wrapper'>\n             {isPending ?\n                 <Pending /> :\n                 <>\n                     <button className='login-btn email' onClick={selectCloud}>Email Account</button>\n                     <button className='login-btn storage' onClick={selectWeb}>Waves Exchange Storage</button>\n                 </>\n             }\n        </div>\n    </form>\n};\n","import { createContext } from 'react';\n\nexport type ConfigContextType = {\n    nodeUrl: string;\n    signerClientUrl: string;\n    explorerUrl: string;\n    dataServicesUrl: string;\n    iconServiceUrl: string;\n};\n\nexport const ConfigContext = createContext<ConfigContextType>({\n    nodeUrl: '',\n    signerClientUrl: '',\n    explorerUrl: '',\n    dataServicesUrl: '',\n    iconServiceUrl: ''\n});\n\nConfigContext.displayName = 'ConfigContext';\n\nexport const ConfigContextProvider = ConfigContext.Provider;\n","import React, { useRef, useContext, useState, useEffect, FC } from 'react';\nimport ReactDOM from \"react-dom\";\nimport './Modal.scss';\n\nconst Context = React.createContext<HTMLDivElement | null>(null);\n\nexport const ModalProvider: FC = ({ children }) => {\n    const modalRef = useRef<HTMLDivElement>(null);\n    const [modalNode, setModalNode] = useState<HTMLDivElement | null>(null);\n\n    useEffect(() => {\n        if (modalRef.current) {\n            setModalNode(modalRef.current);\n        }\n    }, [modalRef.current]);\n\n    return (\n        <div className='container'>\n            <Context.Provider value={modalNode}>{children}</Context.Provider>\n            <div ref={modalRef} />\n        </div>\n    );\n}\n\ninterface ModalProps {\n    onClose: () => void;\n}\n\nexport const Modal: FC<ModalProps> = ({ onClose, children, ...props }) => {\n    const modalNode = useContext(Context);\n\n    return modalNode\n        ? ReactDOM.createPortal(\n            <div className='overlay'>\n                <div className='dialog'>\n                    {children}\n                </div>\n            </div>,\n            modalNode\n        )\n        : null;\n}\n","import React, { useCallback, useContext, useState } from 'react';\nimport { MassTransferForm } from '../MassTransferForm/MassTransferForm';\nimport { LoginModal } from '../LoginModal/LoginModal';\nimport { ProviderWeb } from '@waves.exchange/provider-web';\nimport { ProviderCloud } from '@waves.exchange/provider-cloud';\nimport { Signer } from '@waves/signer';\nimport { ConfigContext } from '../../context/ConfigContext';\nimport { useBalances } from './useBalances';\nimport { Modal } from '../Modal/Modal';\n\n\nexport const Main: React.FC = (props) => {\n    const config = useContext(ConfigContext);\n    const [isPending, setIsPending] = useState(false);\n    const [signer, setSigner] = useState<Signer|null|undefined>(null);\n    const [userAddress, setUserAddress] = useState('');\n    const [loginResults, setLoginResults] = useState<any>(null);\n    const [isModalOpen, setIsModalOpen] = useState(true);\n\n    const { userBalances, balancePending } = useBalances(signer, userAddress);\n\n    const onLogin = useCallback(async (provider: typeof ProviderWeb | typeof ProviderCloud) => {\n        setUserAddress('');\n        const currentSigner = signer || new Signer({ NODE_URL: config.nodeUrl });\n        currentSigner.setProvider(new provider() as any);\n        setSigner(currentSigner);\n        setIsPending(true);\n        try {\n            const user = await currentSigner.login();\n            setUserAddress(user.address);\n            loginResults && loginResults.res({ ...user, signer: currentSigner });\n            setIsModalOpen(false)\n            setIsPending(false);\n            return user;\n        } catch (e) {\n            setIsPending(false);\n            loginResults && loginResults.rej();\n            return;\n        }\n    }, [signer, loginResults]);\n\n    const logout = useCallback(async () => {\n        setIsModalOpen(true);\n        if (!signer) {\n            return;\n        }\n\n        try {\n            await signer.logout();\n            setUserAddress('');\n            setSigner(null);\n        } catch (e) {\n            return;\n        }\n    }, [signer]);\n\n\n    return <>\n        <div className='content'>\n            <MassTransferForm handleLogout={logout} balances={userBalances} signer={signer} balancePending={balancePending}/>\n        </div>\n        {isModalOpen && (\n            <Modal onClose={() => setIsModalOpen(false)}>\n                <LoginModal onSelect={onLogin} onClose={() => setIsModalOpen(false)} isPending={isPending}/>\n            </Modal>\n        )}\n    </>\n}\n","import { useContext, useEffect, useRef, useState } from 'react';\nimport { Signer } from '@waves/signer';\nimport { MyMoney } from '@waves/balances/src/utils';\nimport { Balance } from '@waves/balances';\nimport { ConfigContext } from '../../context/ConfigContext';\n\nexport const useBalances = (signer: Signer|null|undefined, userAddress: string) => {\n    const balanceRef = useRef<Balance>(null);\n    const [userBalances, setUserBalances] = useState<Record<string, MyMoney>>({});\n    const [balancePending, setBalancePending] = useState(false);\n    const config = useContext(ConfigContext);\n\n    useEffect(() => {\n        if (userAddress) {\n            setBalancePending(true);\n            balanceRef.current = new Balance({\n                iconUrl: config.iconServiceUrl,\n                address: userAddress,\n                updateBalancesMs: 5000,\n                dataServicesUrl: config.dataServicesUrl,\n                nodeUrl: config.nodeUrl,\n            });\n\n            balanceRef.current.onUpdate((balances) => {\n                setBalancePending(false);\n\n                setUserBalances(balances);\n            });\n        } else {\n            balanceRef.current?.destroy();\n        }\n    }, [userAddress]);\n\n    useEffect(() => {\n        return () => {\n            balanceRef.current?.destroy();\n        }\n    }, []);\n\n    return { userBalances, balancePending }\n}\n","import React from 'react';\nimport './App.scss';\nimport { Main } from './components/Main/Main';\nimport { ConfigContextProvider, ConfigContextType } from './context/ConfigContext';\nimport { ModalProvider } from './components/Modal/Modal';\n\n\nconst config: ConfigContextType = require(`./configs/config-${process.env.REACT_APP_NETWORK || 'mainnet'}.json`);\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <ModalProvider>\n                <ConfigContextProvider value={config}>\n                    <Main/>\n                </ConfigContextProvider>\n            </ModalProvider>\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}