{"version":3,"sources":["components/Title/Title.tsx","components/Button/Button.tsx","components/TxFormWrapper/TxFormWrapper.tsx","components/SearchAsset/components/DropdownItem.tsx","components/SearchAsset/SearchAsset.tsx","shared/useOutsideClick.ts","components/MassTransferForm/useParseTransfers.ts","components/Pending/Pending.tsx","components/Error/PlateError.tsx","components/MassTransferForm/MassTransferForm.tsx","components/LoginModal/LoginModal.tsx","context/ConfigContext.tsx","components/Modal/Modal.tsx","components/Main/Main.tsx","components/Main/useBalances.ts","App.tsx","index.tsx"],"names":["Title","children","priority","className","Button","variant","rest","TxFormWrapper","title","handleLogout","onConfirm","confirmText","onClick","e","preventDefault","DropdownItem","balance","onSelectItem","inInput","style","backgroundImage","asset","icon","ticker","name","displayName","toFormat","id","SearchAsset","balances","onSelect","React","selectedAsset","setAsset","dropdownVisible","setDropdownVisible","currentBalances","setCurrentBalances","isFocused","setIsFocused","inputValue","setInputValue","dropdownRef","balancesList","Object","values","sort","a","b","hasImage","onChange","value","target","trim","newBalances","filter","toLowerCase","includes","useEffect","handler","ref","handleClickOutside","event","current","contains","document","addEventListener","removeEventListener","isSelectedVisible","onFocus","onBlur","type","placeholder","map","useParseTransfers","content","useState","transfers","setTransfers","recipientHash","data","create","forEach","item","length","text","replace","recipient","amountString","push","getRecipientHashByCSVParseResult","parse","newTransfers","keys","amountNum","amount","RegExp","test","BigNumber","parseAmount","reduce","result","add","cloneWithTokens","every","i","eq","Pending","props","PlateError","MassTransferForm","signer","balancePending","descValue","setDescValue","error","setError","handleChange","handleDescChange","handleConfirm","massTransfer","getTokens","toNumber","assetId","attachment","libs","crypto","base58Encode","broadcast","tx","waitTxConfirm","console","log","JSON","stringify","disabled","LoginModal","isPending","ProviderWeb","ProviderCloud","ConfigContext","createContext","nodeUrl","signerClientUrl","explorerUrl","dataServicesUrl","iconServiceUrl","ConfigContextProvider","Provider","Context","ModalProvider","modalRef","useRef","modalNode","setModalNode","Modal","onClose","useContext","ReactDOM","createPortal","Main","config","setIsPending","setSigner","userAddress","setUserAddress","setOnSelectedSigner","loginResults","isModalOpen","setIsModalOpen","balanceRef","userBalances","setUserBalances","setBalancePending","Balance","iconUrl","address","updateBalancesMs","onUpdate","destroy","useBalances","onLogin","useCallback","provider","currentSigner","Signer","NODE_URL","setProvider","login","user","res","rej","logout","require","App","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.86e12cf9.chunk.js","sourcesContent":["import * as React from 'react';\nimport './Title.scss';\n\ninterface Title {\n    priority?: '1' | '2' | '3' | '4';\n    className?: string;\n}\n\nexport const Title: React.FC<Title> = ({ children, priority = 2, className }) => {\n    const TitleTag = `h${priority}`;\n\n    return (\n        <h2 className={`title ${className}`}>{children}</h2>\n    );\n}\n","import * as React from 'react';\nimport './Button.scss';\nimport { ButtonHTMLAttributes } from 'react';\n\ninterface Button extends ButtonHTMLAttributes<any> {\n    variant: 'transparent' | 'primary';\n    onClick: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n    className?: string;\n}\n\nexport const Button: React.FC<Button> = ({ children, variant, className, ...rest }) => (\n    <button className={`btn btn_${variant} ${className}`} {...rest}>\n        {children}\n    </button>\n);\n","import * as React from 'react';\nimport { Title } from '../Title/Title';\nimport './TxFormWrapper.scss';\nimport { Button } from '../Button/Button';\n\ninterface TxFormWrapperProps {\n    onConfirm: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n    title?: string;\n    handleLogout?: () => void;\n    confirmText?: string;\n}\n\nexport const TxFormWrapper: React.FC<TxFormWrapperProps> = ({ title, handleLogout, children, onConfirm, confirmText = 'Confirm' }) => (\n    <form className='tx-form'>\n        <div className='space-between'>\n            <Title>{title}</Title>\n            {handleLogout && <Button variant='transparent' onClick={(e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n                e.preventDefault();\n                handleLogout();\n            }}>Log Out</Button>}\n        </div>\n\n        {children}\n\n    </form>\n);\n","import * as React from 'react';\nimport { MyMoney } from '@waves/balances/src/utils';\nimport { HTMLAttributes } from 'react';\n\ninterface DropdownProps extends HTMLAttributes<any> {\n    balance: MyMoney;\n    onSelectItem?: (balance: MyMoney) => void;\n    inInput?: boolean;\n}\n\nexport const DropdownItem: React.FC<DropdownProps> = ({ balance, onSelectItem, className, inInput = false }) => (\n    <li className={`search-input-dropdown__item ${className}`} key={balance.asset.id} onClick={() => {\n        if (onSelectItem) {\n            onSelectItem(balance)\n        }\n    }}>\n        <div className='search-input-dropdown__meta-wrapper'>\n            <span className='search-input-dropdown__asset-icon' style={{ backgroundImage: `url('${balance.asset.icon}')` }} />\n            <span className='search-input-dropdown__asset-ticker'>{balance.asset.ticker || balance.asset.name}</span>\n            <span className='search-input-dropdown__asset-name'>{balance.asset.displayName}</span>\n        </div>\n        {!inInput && <div>\n            {balance.toFormat()}\n        </div>}\n    </li>\n);\n","import * as React from 'react';\nimport { MyMoney } from '@waves/balances/src/utils';\nimport { useEffect } from 'react';\nimport './SearchAsset.scss';\nimport { useClickOut } from '../../shared/useOutsideClick';\nimport { DropdownItem } from './components/DropdownItem';\n\ninterface SearchInputProps {\n    onSelect: (balance: MyMoney) => void;\n    balances: Record<string, MyMoney>;\n}\n\nexport const SearchAsset: React.FC<SearchInputProps> = ({ balances, onSelect }) => {\n    const [selectedAsset, setAsset] = React.useState<MyMoney>();\n    const [dropdownVisible, setDropdownVisible] = React.useState(false);\n    const [currentBalances, setCurrentBalances] = React.useState<MyMoney[]>([]);\n    const [isFocused, setIsFocused] = React.useState(false);\n    const [inputValue, setInputValue] = React.useState('');\n    const dropdownRef = React.useRef();\n    const balancesList = React.useMemo(() => Object.values(balances).sort((a, b) => a.asset.hasImage ? -1 : 0), [balances]);\n\n    const onChange = React.useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n        e.preventDefault();\n        setDropdownVisible(true);\n        const value = e.target.value.trim();\n        setInputValue(value);\n\n        const newBalances = balancesList\n            .filter(balance =>\n                balance.asset.name.toLowerCase().includes(value.toLowerCase()) ||\n                balance.asset.ticker?.toLowerCase().includes(value.toLowerCase()) ||\n                balance.asset.id.toLowerCase().includes(value.toLowerCase()))\n\n        setCurrentBalances(newBalances);\n    }, [balancesList]);\n\n    useEffect(() => {\n        setCurrentBalances(balancesList);\n    }, [balancesList]);\n\n    const switchDropdown = (e: React.MouseEvent) => {\n        e.preventDefault();\n        setDropdownVisible(!dropdownVisible);\n    }\n\n    useClickOut(() => {\n        setDropdownVisible(false);\n        setIsFocused(false);\n    }, dropdownRef);\n\n    const isSelectedVisible = React.useMemo(() =>\n        selectedAsset && !dropdownVisible && !isFocused,\n        [selectedAsset, dropdownVisible, isFocused]);\n\n    return (\n        <div className='search-asset-container' ref={dropdownRef}>\n            <div className={`search-input-wrapper ${isSelectedVisible ? 'hide-icon' : ''}`}>\n\n                <input\n                    value={inputValue}\n                    onFocus={() => {\n                        setIsFocused(true);\n                    }}\n                    onBlur={() => {\n                        setIsFocused(false);\n                    }}\n                    onChange={onChange}\n                    className={`search-input input ${isSelectedVisible ? 'transparent' : ''}`}\n                    type='text'\n                    placeholder='Type asset name'/>\n\n                <button className={`search-input-arrow ${dropdownVisible ? 'active' : ''}`} onClick={switchDropdown}/>\n\n                {isSelectedVisible && <DropdownItem className='in-input' balance={selectedAsset} inInput={true}/>}\n\n            </div>\n\n            {dropdownVisible && <ul className='search-input-dropdown'>\n                {currentBalances.map(balance => (\n                    <DropdownItem key={balance.asset.id} balance={balance} onSelectItem={(balance) => {\n                        setDropdownVisible(false);\n                        onSelect(balance);\n                        setAsset(balance);\n                        setInputValue('');\n            }} />\n                ))}\n            </ul>}\n        </div>\n    );\n}\n","import * as React from 'react';\nimport { useEffect } from 'react';\n\nexport const useClickOut = (handler: (event) => void, ref: React.RefObject<HTMLElement>) => {\n\n    useEffect(() => {\n        const handleClickOutside = (event) => {\n            if (ref.current && !ref.current.contains(event.target)) {\n                handler(event);\n            }\n        };\n        if (ref.current) {\n            document.addEventListener('mousedown', handleClickOutside);\n        }\n        return (): void => {\n            document.removeEventListener('mousedown', handleClickOutside);\n        };\n    }, [handler, ref]);\n};\n","import { parse } from 'papaparse';\nimport { useEffect, useState } from 'react';\nimport { BigNumber } from '@waves/bignumber';\nimport { ITransferItem } from './MassTransferForm';\nimport { MyMoney } from '@waves/balances';\n\nconst isEqual = (a: ITransferItem[], b: ITransferItem[]): boolean => {\n    return a.length === b.length && a.every((item, i) => {\n        return item.recipient === b[i].recipient && item.amount.eq(b[i].amount);\n    });\n}\n\nconst parseAmount = (amountString: string) => {\n    const validate = /^([0-9]+\\.)?[0-9]+$/;\n    const amount = amountString\n        .replace(new RegExp('\\\\,', 'g'), '')\n        .replace(new RegExp('\\\\.'), '.')\n        .replace(',', '.');\n\n    if (!validate.test(amount)) {\n        return new BigNumber(0);\n    }\n\n    return new BigNumber(amount);\n}\n\nconst getRecipientHashByCSVParseResult = (data: string[][]): Record<string, string[]> => {\n    const recipientHash = Object.create(null);\n    data.forEach((item) => {\n        if (!item.length) {\n            return null;\n        }\n\n        const [recipient, amountString] = item.map((text) => text.replace(/\\s/g, '').replace(/\"/g, ''));\n        if (!(recipient && amountString)) {\n            return null;\n        }\n\n        if (!recipientHash[recipient]) {\n            recipientHash[recipient] = [];\n        }\n\n        recipientHash[recipient].push(amountString);\n    });\n    return recipientHash;\n}\n\nexport const useParseTransfers = (content: string, selectedAsset: MyMoney): { transfers: ITransferItem[] } => {\n    const [transfers, setTransfers] = useState<ITransferItem[]>([]);\n\n    useEffect(() => {\n        if (!content || !selectedAsset) {\n            return;\n        }\n\n        const { data } = parse(content || '');\n\n\n        const recipientHash = getRecipientHashByCSVParseResult(data);\n        const newTransfers = [];\n\n        Object.keys(recipientHash).forEach((recipient) => {\n            const amountNum = recipientHash[recipient]\n                .map((amount) => {\n                    try {\n                        return parseAmount(amount);\n                    } catch (e) {\n                        return new BigNumber(0);\n                    }\n                })\n                .reduce((result, item) => result.add(item));\n            const amount = selectedAsset.cloneWithTokens(amountNum);\n            newTransfers.push({ recipient, amount });\n        });\n\n        if (!isEqual(transfers, newTransfers)) {\n            setTransfers(newTransfers);\n        }\n\n    }, [content, transfers])\n\n    return { transfers }\n};\n","import * as React from 'react';\nimport './Pending.scss';\n\ninterface PendingProps {\n\n}\n\nexport const Pending: React.FC<PendingProps> = (props) => {\n\n    return (<div className='loader'>\n        <div className=\"loader__dot\" />\n    </div>\n);\n}\n","import * as React from 'react';\nimport './PlateError.scss';\n\nexport const PlateError: React.FC = ({ children }) => {\n\n    return (\n        <div className='plate error'>\n            {children}\n        </div>\n    );\n}\n","import * as React from 'react';\nimport { TxFormWrapper } from '../TxFormWrapper/TxFormWrapper';\nimport { SearchAsset } from '../SearchAsset/SearchAsset';\nimport { MyMoney } from '@waves/balances/src/utils';\nimport { Signer } from '@waves/signer';\nimport { useParseTransfers } from './useParseTransfers';\nimport { Button } from '../Button/Button';\nimport { Pending } from '../Pending/Pending';\nimport { PlateError } from '../Error/PlateError';\nimport { libs } from '@waves/waves-transactions';\n\nexport interface ITransferItem {\n    recipient: string;\n    amount: MyMoney;\n}\n\nconst TEXTAREA_PLACEHOLDER = 'Use a comma to separate recipient and the amount to send. Use\\n' +\n    'a new line for each recipient. \\n' +\n    'Example:\\n' +\n    'Address1,Amount1\\n' +\n    'Alias2,Amount2'\n\ninterface MassTransferFormProps {\n    handleLogout: () => void;\n    balances: Record<string, MyMoney>;\n    signer: Signer;\n    balancePending: boolean;\n}\n\nexport const MassTransferForm: React.FC<MassTransferFormProps> = ({ handleLogout, balances, signer, balancePending }) => {\n    const [selectedAsset, setAsset] = React.useState<MyMoney>();\n    const [inputValue, setInputValue] = React.useState('');\n    const [descValue, setDescValue] = React.useState('');\n    const [error, setError] = React.useState('');\n\n    const handleChange = React.useCallback((e: React.ChangeEvent<HTMLTextAreaElement>) => {\n        e.preventDefault();\n\n        setInputValue(e.target.value);\n        setError('');\n    }, [balances]);\n\n    const handleDescChange = React.useCallback((e: React.ChangeEvent<HTMLTextAreaElement>) => {\n        e.preventDefault();\n\n        setDescValue(e.target.value);\n    }, []);\n\n    const onSelect = React.useCallback((balance: MyMoney) => {\n        setAsset(balance)\n    }, []);\n\n    const { transfers } = useParseTransfers(inputValue, selectedAsset);\n\n    const handleConfirm = React.useCallback(async (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        e.preventDefault();\n        setError('');\n\n        try {\n            const tx = await signer.massTransfer({\n                transfers: transfers.map(item => ({ ...item, amount: item.amount.getTokens().toNumber() })),\n                assetId: selectedAsset.asset.id,\n                attachment: libs.crypto.base58Encode(descValue)\n            }).broadcast();\n\n            // @ts-ignore\n            await signer.waitTxConfirm(tx, 0);\n\n            console.log('%c DONE', 'color: #e5b6ed');\n        } catch (e) {\n            setError(JSON.stringify(e));\n        }\n\n    }, [selectedAsset, signer, transfers, descValue]);\n\n    return <TxFormWrapper title={'Mass Transfer'} handleLogout={handleLogout} onConfirm={handleConfirm} confirmText='Transfer'>\n\n        <div className='form__row'>\n            <label className='form__label'>Select Asset</label>\n            {balancePending ?\n                <Pending /> :\n                <SearchAsset balances={balances} onSelect={onSelect}/>\n            }\n\n        </div>\n\n        <div className='form__row'>\n            <div className='space-between'>\n                <label className='form__label'>Recipients, Amounts: {transfers.length}/100</label>\n                <span className='link'>Import CSV File</span>\n            </div>\n            <textarea className='input textarea' placeholder={TEXTAREA_PLACEHOLDER} onChange={handleChange}/>\n        </div>\n\n        <div className='form__row'>\n            <label className='form__label'>Description</label>\n            <textarea className='input textarea' placeholder={'Write a message'} onChange={handleDescChange}/>\n        </div>\n\n        {error && <PlateError>\n            {error}\n        </PlateError>}\n\n        <Button className='big' variant='primary' onClick={handleConfirm} disabled={transfers.length === 0 || balancePending}>Transfer</Button>\n    </TxFormWrapper>\n}\n","import * as React from 'react';\nimport { ProviderCloud } from '@waves.exchange/provider-cloud';\nimport { ProviderWeb } from '@waves.exchange/provider-web';\nimport './LoginModal.scss';\nimport { Title } from '../Title/Title';\nimport { Pending } from '../Pending/Pending';\n\ninterface LoginModalProps {\n    onSelect: (type: typeof ProviderCloud | typeof ProviderWeb) => any;\n    onClose?: () => void;\n    isPending: boolean;\n}\n\nexport const LoginModal: React.FC<LoginModalProps> = ({ onSelect, isPending }) => {\n\n    const selectWeb = (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        e.preventDefault();\n        onSelect(ProviderWeb);\n    }\n    const selectCloud = (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        e.preventDefault();\n        onSelect(ProviderCloud)\n    };\n\n    return <form className='login-container'>\n        <Title className='login-title'>Connect wallet</Title>\n         <div className='buttons-wrapper'>\n             {isPending ?\n                 <Pending /> :\n                 <>\n                     <button className='login-btn storage' onClick={selectWeb}>Waves Exchange Storage</button>\n                     <button className='login-btn email' onClick={selectCloud}>Email Account</button>\n                 </>\n             }\n        </div>\n    </form>\n};\n","import { createContext } from 'react';\n\nexport type ConfigContextType = {\n    nodeUrl: string;\n    signerClientUrl: string;\n    explorerUrl: string;\n    dataServicesUrl: string;\n    iconServiceUrl: string;\n};\n\nexport const ConfigContext = createContext<ConfigContextType>({\n    nodeUrl: '',\n    signerClientUrl: '',\n    explorerUrl: '',\n    dataServicesUrl: '',\n    iconServiceUrl: ''\n});\n\nConfigContext.displayName = 'ConfigContext';\n\nexport const ConfigContextProvider = ConfigContext.Provider;\n","import React, { useRef, useContext, useState, useEffect, FC } from 'react';\nimport ReactDOM from \"react-dom\";\nimport './Modal.scss';\n\nconst Context = React.createContext<HTMLDivElement | null>(null);\n\nexport const ModalProvider: FC = ({ children }) => {\n    const modalRef = useRef<HTMLDivElement>(null);\n    const [modalNode, setModalNode] = useState<HTMLDivElement | null>(null);\n\n    useEffect(() => {\n        if (modalRef.current) {\n            setModalNode(modalRef.current);\n        }\n    }, [modalRef.current]);\n\n    return (\n        <div className='container'>\n            <Context.Provider value={modalNode}>{children}</Context.Provider>\n            <div ref={modalRef} />\n        </div>\n    );\n}\n\ninterface ModalProps {\n    onClose: () => void;\n}\n\nexport const Modal: FC<ModalProps> = ({ onClose, children, ...props }) => {\n    const modalNode = useContext(Context);\n\n    return modalNode\n        ? ReactDOM.createPortal(\n            <div className='overlay'>\n                <div className='dialog'>\n                    {children}\n                </div>\n            </div>,\n            modalNode\n        )\n        : null;\n}\n","import React, { useCallback, useContext, useState } from 'react';\nimport { MassTransferForm } from '../MassTransferForm/MassTransferForm';\nimport { LoginModal } from '../LoginModal/LoginModal';\nimport { ProviderWeb } from '@waves.exchange/provider-web';\nimport { ProviderCloud } from '@waves.exchange/provider-cloud';\nimport { Signer } from '@waves/signer';\nimport { ConfigContext } from '../../context/ConfigContext';\nimport { useBalances } from './useBalances';\nimport { Modal } from '../Modal/Modal';\n\ninterface MainProps {\n\n}\n\nexport const Main: React.FC<MainProps> = (props) => {\n    const config = useContext(ConfigContext);\n    const [isPending, setIsPending] = useState(false);\n    const [signer, setSigner] = useState<Signer|null|undefined>(null);\n    const [userAddress, setUserAddress] = useState('');\n    const [onSelectSigner, setOnSelectedSigner] = useState<boolean>();\n    const [loginResults, setLoginResults] = useState<any>(null);\n    const [isModalOpen, setIsModalOpen] = useState(true);\n\n    const { userBalances, balancePending } = useBalances(signer, userAddress);\n\n\n    const onLogin = useCallback(async (provider: typeof ProviderWeb | typeof ProviderCloud) => {\n        setOnSelectedSigner(false);\n        setUserAddress('');\n        const currentSigner = signer || new Signer({ NODE_URL: config.nodeUrl });\n        currentSigner.setProvider(new provider() as any);\n        setSigner(currentSigner);\n        setIsPending(true);\n        try {\n            const user = await currentSigner.login();\n            setUserAddress(user.address);\n            loginResults && loginResults.res({ ...user, signer: currentSigner });\n            setIsModalOpen(false)\n            setIsPending(false);\n            return user;\n        } catch (e) {\n            setIsPending(false);\n            loginResults && loginResults.rej();\n            return;\n        }\n    }, [signer, loginResults]);\n\n    const logout = useCallback(async () => {\n        setIsModalOpen(true);\n        if (!signer) {\n            return;\n        }\n\n        try {\n            await signer.logout();\n            setUserAddress('');\n            setSigner(null);\n        } catch (e) {\n            return;\n        }\n    }, [signer]);\n\n\n    return <>\n        <div className='content'>\n            <MassTransferForm handleLogout={logout} balances={userBalances} signer={signer} balancePending={balancePending}/>\n        </div>\n        {isModalOpen && (\n            <Modal onClose={() => setIsModalOpen(false)}>\n                <LoginModal onSelect={onLogin} onClose={() => setIsModalOpen(false)} isPending={isPending}/>\n            </Modal>\n        )}\n    </>\n}\n","import { useContext, useEffect, useRef, useState } from 'react';\nimport { Signer } from '@waves/signer';\nimport { MyMoney } from '@waves/balances/src/utils';\nimport { Balance } from '@waves/balances';\nimport { ConfigContext } from '../../context/ConfigContext';\n\nexport const useBalances = (signer: Signer|null|undefined, userAddress: string) => {\n    const balanceRef = useRef<Balance>(null);\n    const [userBalances, setUserBalances] = useState<Record<string, MyMoney>>({});\n    const [balancePending, setBalancePending] = useState(false);\n    const config = useContext(ConfigContext);\n\n    useEffect(() => {\n        if (userAddress) {\n            setBalancePending(true);\n            balanceRef.current = new Balance({\n                iconUrl: config.iconServiceUrl,\n                address: userAddress,\n                updateBalancesMs: 5000,\n                dataServicesUrl: config.dataServicesUrl,\n                nodeUrl: config.nodeUrl,\n            });\n\n            balanceRef.current.onUpdate((balances) => {\n                setBalancePending(false);\n\n                setUserBalances(balances);\n            });\n        } else {\n            balanceRef.current?.destroy();\n        }\n    }, [userAddress]);\n\n    useEffect(() => {\n        return () => {\n            balanceRef.current?.destroy();\n        }\n    }, []);\n\n    return { userBalances, balancePending }\n}\n","import React from 'react';\nimport './App.scss';\nimport { Main } from './components/Main/Main';\nimport { ConfigContextProvider, ConfigContextType } from './context/ConfigContext';\nimport { ModalProvider } from './components/Modal/Modal';\n\n\nconst config: ConfigContextType = require(`./configs/config-${process.env.REACT_APP_NETWORK || 'mainnet'}.json`);\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <ModalProvider>\n                <ConfigContextProvider value={config}>\n                    <Main/>\n                </ConfigContextProvider>\n            </ModalProvider>\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}